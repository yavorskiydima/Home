{"version":3,"sources":["container/intro/photo.JPG","container/themes.js","components/common.js","container/intro/intro.styled.js","container/intro/intro.container.js","container/header/header.styled.js","container/header/header.js","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","themes","dark","bgColor","textColor","light","AppContainer","styled","div","AppWrapper","props","fullHeight","Container","Photo","photo","Info","InfoItem","theme","InfoItemTopic","span","IntroContainer","href","Component","Wrapper","Item","a","HeaderContainer","onClick","this","toogleTheme","Body","App","state","Date","getHours","setState","accounts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,mC,sMCA9BC,EAAS,CAClBC,KAAM,CACFC,QAAS,OACTC,UAAW,QAEfC,MAAO,CACHF,QAAS,OACTC,UAAW,S,wRCLZ,IAAME,EAAeC,IAAOC,IAAV,KAQZC,EAAaF,IAAOC,IAAV,KAET,SAAAE,GAAK,OAAIA,EAAMC,WAAa,QAAU,U,sxCCR7C,IAAMC,EAAYL,YAAOD,EAAPC,CAAH,KAOTM,EAAQN,IAAOC,IAAV,IAIUM,KAMfC,EAAOR,IAAOC,IAAV,KAIJQ,EAAWT,IAAOC,IAAV,KAIJ,SAAAE,GAAK,OAAIA,EAAMO,MAAMb,aAWN,SAAAM,GAAK,OAAIA,EAAMO,MAAMb,aAWxCc,EAAgBX,IAAOY,KAAV,KC/CbC,EAAb,iLAEQ,OACI,kBAACX,EAAD,CAAYE,YAAU,GAClB,kBAACC,EAAD,KACI,kBAACG,EAAD,KACI,gHACA,kTACiE,8CADjE,KAC+E,oEAD/E,KAC+F,kGAD/F,61BAKA,kBAACC,EAAD,KAAU,kBAACE,EAAD,mDAAsC,uBAAGG,KAAK,oBAAR,uBAChD,kBAACL,EAAD,KAAU,kBAACE,EAAD,cAAoC,uBAAGG,KAAK,kCAAR,4BAC9C,kBAACL,EAAD,KAAU,kBAACE,EAAD,iBAAuC,uBAAGG,KAAK,8BAAR,mBACjD,kBAACL,EAAD,KAAU,kBAACE,EAAD,2DAEd,kBAACL,EAAD,YAjBpB,GAAoCS,a,68BCD7B,IAAMV,EAAYL,YAAOD,EAAPC,CAAH,KAOTgB,EAAUhB,YAAOE,EAAPF,CAAH,KAMI,SAAAG,GAAK,OAAIA,EAAMO,MAAMd,WAGhCqB,EAAOjB,IAAOkB,EAAV,KAGJ,SAAAf,GAAK,OAAIA,EAAMO,MAAMb,aAWF,SAAAM,GAAK,OAAIA,EAAMO,MAAMb,aC9BxCsB,EAAb,iLAEQ,OACI,kBAACH,EAAD,KACI,kBAAC,EAAD,KACI,kBAACC,EAAD,CAAMH,KAAK,KAAX,8CACA,kBAACG,EAAD,CAAMH,KAAK,KAAX,kCACA,kBAACG,EAAD,CAAMH,KAAK,KAAX,4BACA,kBAACG,EAAD,CAAMH,KAAK,KAAX,kCACA,kBAACG,EAAD,CAAMH,KAAK,KAAX,8CACA,kBAACG,EAAD,CAAMH,KAAK,KAAX,0DACA,kBAACG,EAAD,CAAMG,QAASC,KAAKlB,MAAMmB,aAA1B,kCAXpB,GAAqCP,a,sNCI9B,IAAMQ,EAAOvB,IAAOC,IAAV,KAOK,SAAAE,GAAK,OAAIA,EAAMO,MAAMd,WAChC,SAAAO,GAAK,OAAIA,EAAMO,MAAMb,aAyBjB2B,EAtBf,2MACEC,MAAQ,CACNf,OAAO,IAAIgB,MAAOC,WAAa,GAAKjC,EAAOC,KAAOD,EAAOI,OAF7D,EAKEwB,YAAc,WACZ,EAAKM,UAAS,SAAAH,GAAK,MAAK,CAAEf,MAAOe,EAAMf,QAAUhB,EAAOI,MAAQJ,EAAOC,KAAOD,EAAOI,WANzF,wEAUI,OAAQ,oCACN,kBAAC,IAAD,CAAeY,MAAOW,KAAKI,MAAMf,OAC/B,kBAAC,gBAAD,CAAemB,SAAU,CAAC,YAC1B,kBAACN,EAAD,KACE,kBAAC,EAAD,CAAiBD,YAAaD,KAAKC,cACnC,kBAAC,EAAD,aAfV,GAAyBP,aCNLe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b75a157a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/photo.5afb2a5d.JPG\";","export const themes = {\r\n    dark: {\r\n        bgColor: '#222',\r\n        textColor: '#fff',\r\n    },\r\n    light: {\r\n        bgColor: '#fff',\r\n        textColor: '#222',\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nexport const AppContainer = styled.div`\r\n    padding: 15px;\r\n    width: 100%;\r\n    height: 100%;\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const AppWrapper = styled.div`\r\n    width: 100%;\r\n    height: ${props => props.fullHeight ? '100vh' : 'auto'};\r\n`;\r\n","import styled from 'styled-components';\r\nimport { AppContainer } from 'components/common'\r\nimport photo from './photo.JPG'\r\n\r\nexport const Container = styled(AppContainer)`\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Photo = styled.div`\r\n    width: 40%;\r\n    height: 400px;\r\n    border-radius: 10px;\r\n    background-image: url(${photo});\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n`;\r\n\r\nexport const Info = styled.div`\r\n    width: 40%;\r\n`;\r\n\r\nexport const InfoItem = styled.div`\r\n    padding: 8px 0;\r\n    a {\r\n        text-decoration: none;\r\n        color: ${props => props.theme.textColor};\r\n        position: relative;\r\n        &:after {\r\n            opacity: 0;\r\n            display: block;\r\n            content: \"\";\r\n            bottom: -4px;\r\n            width: 100%;\r\n            height: 2px;\r\n            left: 0px;\r\n            position: absolute;\r\n            background-color: ${props => props.theme.textColor};\r\n            transition: opacity .2s linear;\r\n        }\r\n        &:hover {\r\n            &:after {\r\n                opacity: 1;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const InfoItemTopic = styled.span`\r\n    display: inline-block;\r\n    width: 150px;\r\n    font-weight: 700;\r\n`;","import React, { Component } from 'react'\r\nimport { AppWrapper } from 'components/common'\r\nimport { Container, Photo, Info, InfoItem, InfoItemTopic, } from './intro.styled'\r\n\r\nexport class IntroContainer extends Component {\r\n    render() {\r\n        return (\r\n            <AppWrapper fullHeight>\r\n                <Container>\r\n                    <Info>\r\n                        <h1>Меня зовут Дима</h1>\r\n                        <p>\r\n                            Привет друг, я работаю Frontend разработчиком и эта страница <b>ни CV</b>, <b>ни блог</b>, <b>ни портфолио</b>.\r\n                            Эта страница созданна просто так, от того что нечего делать.\r\n                            Тут я выложу немного инфы о себе, возможно какие-то интересные ссылки и вообще все что посчитаю интересным :)\r\n                        </p>\r\n                        <InfoItem><InfoItemTopic>Телефон</InfoItemTopic><a href=\"tel:+79226120681\">+7 (922) 612 06 81</a></InfoItem>\r\n                        <InfoItem><InfoItemTopic>Email</InfoItemTopic><a href=\"mailto:yavorskiydima@gmail.com\">yavorskiydima@gmail.com</a></InfoItem>\r\n                        <InfoItem><InfoItemTopic>Telegram</InfoItemTopic><a href=\"https://t.me/yavorskiydima\">@yavorskiydima</a></InfoItem>\r\n                        <InfoItem><InfoItemTopic>Соцесети</InfoItemTopic></InfoItem>\r\n                    </Info>\r\n                    <Photo />\r\n                </Container>\r\n            </AppWrapper>\r\n        )\r\n    }\r\n}\r\n\r\n","import styled from 'styled-components';\r\nimport { AppContainer, AppWrapper } from 'components/common'\r\n\r\nexport const Container = styled(AppContainer)`\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    justify-content: flex-end;\r\n    padding-right: 50px;\r\n`;\r\n\r\nexport const Wrapper = styled(AppWrapper)`\r\n    position: fixed;\r\n    height: 50px;\r\n    background-color: red;\r\n    box-shadow: 0 0 10px rgba(0,0,0,0.5);\r\n\r\n    background-color: ${props => props.theme.bgColor};\r\n`;\r\n\r\nexport const Item = styled.a`\r\n    margin: 0 20px;\r\n    text-decoration: none;\r\n    color: ${props => props.theme.textColor};\r\n    position: relative;\r\n        &:after {\r\n            opacity: 0;\r\n            display: block;\r\n            content: \"\";\r\n            bottom: -4px;\r\n            right: -10%;\r\n            height: 2px;\r\n            left: -10%;\r\n            position: absolute;\r\n            background-color: ${props => props.theme.textColor};\r\n            transition: opacity .2s linear;\r\n        }\r\n        &:hover {\r\n            &:after {\r\n                opacity: 1;\r\n            }\r\n        }\r\n`;\r\n","import React, { Component } from 'react'\r\nimport { Container, Wrapper, Item, } from './header.styled'\r\n\r\nexport class HeaderContainer extends Component {\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <Container>\r\n                    <Item href=\"#\">Главная</Item>\r\n                    <Item href=\"#\">Скилы</Item>\r\n                    <Item href=\"#\">Опыт</Item>\r\n                    <Item href=\"#\">Учеба</Item>\r\n                    <Item href=\"#\">Проекты</Item>\r\n                    <Item href=\"#\">Материалы</Item>\r\n                    <Item onClick={this.props.toogleTheme} >Тема</Item>\r\n                </Container>\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport styled, { ThemeProvider, } from 'styled-components'\r\nimport { YMInitializer, } from 'react-yandex-metrika';\r\nimport { themes, } from './themes';\r\nimport { IntroContainer, } from './intro';\r\nimport { HeaderContainer, } from './header/header'\r\n\r\nexport const Body = styled.div`\r\n  position: relative;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  min-height: 100vh;\r\n  min-width: 100vw;\r\n  background-color: ${props => props.theme.bgColor};\r\n  color: ${props => props.theme.textColor};\r\n`;\r\n\r\nexport class App extends Component {\r\n  state = {\r\n    theme: new Date().getHours() > 20 ? themes.dark : themes.light,\r\n  }\r\n\r\n  toogleTheme = () => {\r\n    this.setState(state => ({ theme: state.theme === themes.light ? themes.dark : themes.light, }));\r\n  }\r\n\r\n  render() {\r\n    return (<>\r\n      <ThemeProvider theme={this.state.theme}>\r\n        <YMInitializer accounts={[56947498]} />\r\n        <Body>\r\n          <HeaderContainer toogleTheme={this.toogleTheme} />\r\n          <IntroContainer />\r\n        </Body>\r\n      </ThemeProvider>\r\n    </>)\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}